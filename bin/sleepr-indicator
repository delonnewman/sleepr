#!/usr/bin/env python

from gi.repository import Gtk
from gi.repository import AppIndicator3 as ai

import yaml, sys

CONFIG_FILE = '/etc/sleepr'

class PreferencesWindow:
    def __init__(self):
        builder = Gtk.Builder.new()
        
        try:
            builder.add_from_file("lib/preferences-window.glade")
        except:
            print "Can't load UI"
            raise

        self.__w = builder.get_object("PreferencesWindow")

        self.config = self.load_config()

        self.beginHours = builder.get_object("spnBeginHours")
        self.beginHours.set_range(0, 23)
        self.beginHours.set_increments(1, -1)
        self.beginHours.set_wrap(True)
        self.beginHours.set_value(self.config['at'][0])

        self.beginMinutes = builder.get_object("spnBeginMinutes")
        self.beginMinutes.set_range(0, 59)
        self.beginMinutes.set_increments(1, -1)
        self.beginHours.set_wrap(True)
        self.beginMinutes.set_value(self.config['at'][1])

        self.endHours = builder.get_object("spnEndHours")
        self.endHours.set_range(0, 23)
        self.endHours.set_increments(1, -1)
        self.beginHours.set_wrap(True)
        self.endHours.set_value(self.config['until'][0])

        self.endMinutes = builder.get_object("spnEndMinutes")
        self.endMinutes.set_range(0, 59)
        self.endMinutes.set_increments(1, -1)
        self.beginHours.set_wrap(True)
        self.endMinutes.set_value(self.config['until'][1])

        self.cancelButton = builder.get_object("btnCancel")
        self.cancelButton.connect("clicked", self.__cancel)

        self.okButton = builder.get_object("btnOK")
        self.okButton.connect("clicked", self.__ok)


    def show(self):
        self.__w.show()

    def load_config(self):
        try:
            f = open(CONFIG_FILE, 'r')
            return yaml.load(f.read())
        except:
            print "Can't read file '%s'" % CONFIG_FILE 

    def save_config(self, config):
        print config
        for k in ['at', 'until']:
            if config[k]:
                self.config[k] = config[k]

        try:
            f = open(CONFIG_FILE, 'w')
            f.write(yaml.dump(self.config))
        except:
            print "Can't write to file '%s'" % CONFIG_FILE

    # callbacks

    def __cancel(self, w):
        self.__w.hide()

    def __ok(self, w):
        self.save_config({
            'at' : [
                int(self.beginHours.get_value()),
                int(self.beginMinutes.get_value()) ],
            'until' : [
                int(self.endHours.get_value()),
                int(self.endHours.get_value()) ] })

        self.__w.hide()

class AboutDialog:
    def __init__(self):
        self.__d = Gtk.AboutDialog.new()

        self.__d.set_program_name("Sleepr")
        self.__d.set_authors(["Delon Newman"])
        self.__d.set_copyright("2012 Delon Newman")
        self.__d.set_version("0.0.3") # TODO: should be loaded from config file

    def show(self):
        self.__d.show()

class Indicator:
    def __init__(self):
        self.indicator = ai.Indicator.new("sleepr", "indicator-messages", 
                                          ai.IndicatorCategory.APPLICATION_STATUS)

        self.indicator.set_status(ai.IndicatorStatus.ACTIVE)
        self.indicator.set_attention_icon("indicator-messages-new")

        menu = Gtk.Menu()

        pref = Gtk.MenuItem("Preferences")
        pref.connect("activate", self.__show_preferences)
        menu.append(pref)
        pref.show()

        about = Gtk.MenuItem("About")
        about.connect("activate", self.__show_about)
        menu.append(about)
        about.show()

        quit = Gtk.MenuItem("Quit")
        quit.connect("activate", self.__quit)
        menu.append(quit)
        quit.show()

        self.indicator.set_menu(menu)

    def show(self):
        Gtk.main()

    # callbacks

    def __show_preferences(self, w):
        PreferencesWindow().show()

    def __quit(self, w):
        Gtk.main_quit()

    def __show_about(self, w):
        AboutDialog().show()

if __name__ == "__main__":
    Indicator().show() 
